

<script type="text/javascript">
var maps = {};

$(function() {
    var styleCache = {};
    var styleFunc = function(feature, resolution) {
        var size = feature.get('features').length;
        var style = styleCache[size];
        if (!style) {
            style = [new ol.style.Style({
                image: new ol.style.Circle({
                    radius: 10,
                    stroke: new ol.style.Stroke({
                        color: '#fff'
                    }),
                    fill: new ol.style.Fill({
                        color: '#3399CC'
                    })
                }),
                text: new ol.style.Text({
                    text: size.toString(),
                    fill: new ol.style.Fill({
                        color: '#fff'
                    })
                })
              })];
            styleCache[size] = style;
        }
        return style;
    }

    var iconStyle = new ol.style.Style({
        image: new ol.style.Icon({
            anchor: [0.5, 0.5],
            anchorXUnits: 'fraction',
            anchorYUnits: 'fraction',
            opacity: 0.75,
            src: '/data/api/data/api/images/pin.png'
        })
    });

    var setup_map = function(dataset_name) {
      $('#mapbox-' + dataset_name + ' h3').remove();

      var data_url = '/data/api/service/transport/' + dataset_name + '/nearest';
      $.get(data_url, {lat: 53.399397, lon: -2.9803698000000622}, function(data){
          var features = [];
          if (data['success'] === true) {
              features = _.map(data['result'], function(ob, index) {
                  options = {featureProjection: 'EPSG:3857',
                             dataProjection: 'EPSG:4326'};
                  var iconFeature = new ol.Feature({
                      geometry: (new ol.format.GeoJSON()).readGeometryFromObject(ob['latlong'], options),
		  });
                  iconFeature.setStyle(iconStyle);
                  return iconFeature;
              });
          }

          var vectorSource = new ol.source.Vector({
              features: features
          });

	  var clusterSource = new ol.source.Cluster({
              distance: 20,
              source: vectorSource
          });

          var vectorLayer = new ol.layer.Vector({
              'source': vectorSource,
              'style': styleFunc
          });

          var clusterLayer = new ol.layer.Vector({
              'source': clusterSource,
              'style': styleFunc
          });

          var tileLayer = new ol.layer.Tile({
              'source': new ol.source.OSM()
          });

          var map = new ol.Map({
            target: 'mapbox-' + dataset_name,
            layers: [tileLayer, vectorLayer],
            view: new ol.View({
              center: ol.proj.fromLonLat([-2.5, 54.0]),
              zoom: 4
            })
          });

          maps[dataset_name] = {map: map,
                                setToRegular: function(){
                                                  map.getLayers().clear();
                                                  map.addLayer(tileLayer);
                                                  map.addLayer(vectorLayer);
                                              },
                                setToCluster: function(){
                                                  map.getLayers().clear();
                                                  map.addLayer(tileLayer);
                                                  map.addLayer(clusterLayer);
                                              }};

      });
    };

    $('a.to_clusters').click(function(e){
        _.each(maps, function(map) {
            map.setToCluster();
        });
        return false;
    });

    $('a.to_regular').click(function(){
        _.each(maps, function(map) {
            map.setToRegular();
        });
        return false;
    });

<%= for {key, v}<- @schema do %>
    <%= if has_geo_data(@manifest, key) do %>
    setup_map('<%= key %>');
    <% end %>
<% end %>
});
</script>

<div class="map">
    <ul class="nav nav-pills nav-stacked col-md-3" id="schematabs2">
        <%= for {key, v}<- @schema do %>
        <li><a href="#map-<%= key %>" data-toggle="tab"><%= prettify(key) %></a></li>
        <% end %>
    </ul>

    <div class="tab-content" style="height: 500px">
        <%= for {key, v}<- @schema do %>
        <div role="tabpanel" class="tab-pane" id="map-<%= key %>" style="margin-top: 20px;">
            <div id="mapbox-<%= key %>" style="width: 400px; height: 400px">
                <h3>This dataset has no geographic data</h3>
            </div>
            <a href="" class="to_clusters" dataset="<%= key %>">Clusters</a> <a href="" class="to_regular">Points</a>
        </div>
        <% end %>
    </div>
</div>
